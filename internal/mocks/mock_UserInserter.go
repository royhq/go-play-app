// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"
	create "go-play-app/features/users/create"

	mock "github.com/stretchr/testify/mock"
)

// UserInserterMock is an autogenerated mock type for the UserInserter type
type UserInserterMock struct {
	mock.Mock
}

type UserInserterMock_Expecter struct {
	mock *mock.Mock
}

func (_m *UserInserterMock) EXPECT() *UserInserterMock_Expecter {
	return &UserInserterMock_Expecter{mock: &_m.Mock}
}

// Insert provides a mock function with given fields: _a0, _a1
func (_m *UserInserterMock) Insert(_a0 context.Context, _a1 create.User) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Insert")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, create.User) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserInserterMock_Insert_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Insert'
type UserInserterMock_Insert_Call struct {
	*mock.Call
}

// Insert is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 create.User
func (_e *UserInserterMock_Expecter) Insert(_a0 interface{}, _a1 interface{}) *UserInserterMock_Insert_Call {
	return &UserInserterMock_Insert_Call{Call: _e.mock.On("Insert", _a0, _a1)}
}

func (_c *UserInserterMock_Insert_Call) Run(run func(_a0 context.Context, _a1 create.User)) *UserInserterMock_Insert_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(create.User))
	})
	return _c
}

func (_c *UserInserterMock_Insert_Call) Return(_a0 error) *UserInserterMock_Insert_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserInserterMock_Insert_Call) RunAndReturn(run func(context.Context, create.User) error) *UserInserterMock_Insert_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserInserterMock creates a new instance of UserInserterMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserInserterMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserInserterMock {
	mock := &UserInserterMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
