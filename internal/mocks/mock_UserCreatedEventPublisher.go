// Code generated by mockery v2.41.0. DO NOT EDIT.

package mocks

import (
	context "context"

	create "github.com/royhq/go-play-app/features/users/create"
	mock "github.com/stretchr/testify/mock"
)

// UserCreatedEventPublisherMock is an autogenerated mock type for the UserCreatedEventPublisher type
type UserCreatedEventPublisherMock struct {
	mock.Mock
}

type UserCreatedEventPublisherMock_Expecter struct {
	mock *mock.Mock
}

func (_m *UserCreatedEventPublisherMock) EXPECT() *UserCreatedEventPublisherMock_Expecter {
	return &UserCreatedEventPublisherMock_Expecter{mock: &_m.Mock}
}

// Publish provides a mock function with given fields: _a0, _a1
func (_m *UserCreatedEventPublisherMock) Publish(_a0 context.Context, _a1 create.CreatedUserEvent) {
	_m.Called(_a0, _a1)
}

// UserCreatedEventPublisherMock_Publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Publish'
type UserCreatedEventPublisherMock_Publish_Call struct {
	*mock.Call
}

// Publish is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 create.CreatedUserEvent
func (_e *UserCreatedEventPublisherMock_Expecter) Publish(_a0 interface{}, _a1 interface{}) *UserCreatedEventPublisherMock_Publish_Call {
	return &UserCreatedEventPublisherMock_Publish_Call{Call: _e.mock.On("Publish", _a0, _a1)}
}

func (_c *UserCreatedEventPublisherMock_Publish_Call) Run(run func(_a0 context.Context, _a1 create.CreatedUserEvent)) *UserCreatedEventPublisherMock_Publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(create.CreatedUserEvent))
	})
	return _c
}

func (_c *UserCreatedEventPublisherMock_Publish_Call) Return() *UserCreatedEventPublisherMock_Publish_Call {
	_c.Call.Return()
	return _c
}

func (_c *UserCreatedEventPublisherMock_Publish_Call) RunAndReturn(run func(context.Context, create.CreatedUserEvent)) *UserCreatedEventPublisherMock_Publish_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserCreatedEventPublisherMock creates a new instance of UserCreatedEventPublisherMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserCreatedEventPublisherMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserCreatedEventPublisherMock {
	mock := &UserCreatedEventPublisherMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
